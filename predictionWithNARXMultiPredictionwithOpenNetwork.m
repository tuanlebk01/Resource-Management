% Solve an Autoregression Time-Series Problem with a NAR Neural Network
% Script generated by Neural Time Series app
% Created 08-Apr-2016 10:00:05
%
% This script assumes this variable is defined:
%
%   cpuMean - feedback time series.
clear all
close all
load cpuMean
cpuMean = con2seq(cpuMean);
T = cpuMean;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

% Create a Nonlinear Autoregressive Network
feedbackDelays = 1:6;
hiddenLayerSize = 15;
net = narnet(feedbackDelays,hiddenLayerSize,'open',trainFcn);

% Prepare the Data for Training and Simulation
% The function PREPARETS prepares timeseries data for a particular network,
% shifting time by the minimum amount to fill input states and layer
% states. Using PREPARETS allows you to keep your original time series data
% unchanged, while easily customizing it for networks with differing
% numbers of delays, with open loop or closed loop feedback modes.
[x,xi,ai,t] = preparets(net,{},{},T);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Train the Network
[net,tr] = train(net,x,t,xi,ai);

% Test the Network
y = net(x,xi,ai);
e = gsubtract(t,y);
performance = perform(net,t,y)

% View the Network
% view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotregression(t,y)
%figure, plotresponse(t,y)
%figure, ploterrcorr(e)
%figure, plotinerrcorr(x,e)

% Closed Loop Network
% Use this network to do multi-step prediction.
% The function CLOSELOOP replaces the feedback input with a direct
% connection from the outout layer.
netc = closeloop(net);
netc.name = [net.name ' - Closed Loop'];
errorM = []; % error when using multi-prediction
for interval = 2:100
    % view(netc)
    [xc,xic,aic,tc] = preparets(netc,{},{},T);
    startP = 4000;
    index = startP:startP+interval;
    x2 = T(index);
    actualV = T(startP+interval+1:startP+interval*2+1); % need to be compared with prediced values
    yc = netc(x2,xic,aic);
    %closedLoopPerformance = perform(net,tc,yc);
    if interval == 30
        figure(1)
        plot(cell2mat(actualV))
        hold on; plot(cell2mat(yc))
        legend('actual values','predicted values');
    end
    errorm = mape(cell2mat(yc(1:end-1)),cell2mat(actualV));
    errorM = [errorM errorm];
end
figure(2)
plot(errorM)
ylabel('MAPE')
xlabel('Timestep');
title('Prediction using NARX with close network');
break


% Step-Ahead Prediction Network
% For some applications it helps to get the prediction a timestep early.
% The original network returns predicted y(t+1) at the same time it is
% given y(t+1). For some applications such as decision making, it would
% help to have predicted y(t+1) once y(t) is available, but before the
% actual y(t+1) occurs. The network can be made to return its output a
% timestep early by removing one delay so that its minimal tap delay is now
% 0 instead of 1. The new network returns the same outputs as the original
% network, but outputs are shifted left one timestep.
nets = removedelay(net);
nets.name = [net.name ' - Predict One Step Ahead'];
% view(nets)
[xs,xis,ais,ts] = preparets(nets,{},{},T);
ys = nets(xs,xis,ais);
stepAheadPerformance = perform(nets,ts,ys)
figure(1)
plot(cell2mat(ts))
hold on; plot(cell2mat(ys))
legend('actual values','predicted values');
errorS = mape(cell2mat(ys(1:end-1)),cell2mat(ts(1:end-1)))
