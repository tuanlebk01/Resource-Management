
%% Load data and initial values
clear all
close all
load ramOneMinuteInterval.mat
cpuMean = con2seq(ramMean);
%N = 300; % skip the last 300 data points.
T = cpuMean;
n = length(T);
maxStep = 10; % 10 step ahead prediction.
point = round(n*0.); % 60% left for buiding a model
inputdata = T(1:point);
delay = 2;
predictedY = []; % to store predicted values
overallMape = [];
%% Choose a Training Function
trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.

%% Create a Nonlinear Autoregressive Network
feedbackDelays = 1:delay;
hiddenLayerSize = 10;
net = narnet(feedbackDelays,hiddenLayerSize,'open',trainFcn);
net.trainParam.showWindow = false;

%% Setup Division of Data for Training, Validation, Testing
%[trainingSize,net] = trainingNetwork(T,net,6); MY FUNCTION
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

%% Train network
[x,xi,ai,t] = preparets(net,{},{},inputdata);
[net,tr] = train(net,x,t,xi,ai);
%% prediction with 10-step ahead
repeatT = 10;
xMatrix = zeros(repeatT,maxStep);
predictedYMatrix = zeros(repeatT,100);
for i = 1:repeatT
    %% Randomly change the size of input data
    startP = randi([point n-maxStep],1,1);
    index = startP-delay:startP; % compute error with first errorCheckInterval data points.
    inputSeries = T(index);
    
    %% Multi-step prediction
    for timeStep = 1:maxStep
        [xT,xiT,aiT,tT] = preparets(net,{},{},inputSeries);
        y = net(tT,xiT,aiT); % ts is similar to actualV
        temPredictedY = y(end);
        predictedY = [predictedY temPredictedY];
        inputSeries = [inputSeries predictedY];
    end
    
    actualV = T(startP+1:startP+maxStep);
    MAPE = mape(cell2mat(actualV),cell2mat(predictedY));
    overallMape = [overallMape MAPE];
end
%% compute MAPE for every timesteps.
finalMape = mean(overallMape)

%% plots    

